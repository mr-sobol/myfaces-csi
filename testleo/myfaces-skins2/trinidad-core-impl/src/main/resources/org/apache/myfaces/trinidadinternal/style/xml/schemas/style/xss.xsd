<?xml version="1.0"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
	   
-->
<schema targetNamespace="http://myfaces.apache.org/uix/style"
  xmlns:style="http://myfaces.apache.org/uix/style"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns="http://www.w3.org/2001/XMLSchema"
  xmlns:html="http://www.w3.org/TR/REC-html40"
  xmlns:cabotool="http://myfaces.apache.org/trinidad/cabo/tool"
  elementFormDefault="qualified">

  <element name="styleSheetDocument" type="style:styleSheetDocumentType">
    <annotation>
      <documentation>

      <cabotool:summary>
      The root element of the XSS document.
      </cabotool:summary>

      <cabotool:description>
      <html:p>
      The <html:code>&lt;styleSheetDocument&gt;</html:code> element is the 
      root element of the XSS document.  It contains any number of 
      <html:code>&lt;import&gt;</html:code> elements followed by any number 
      of <html:code>&lt;styleSheet&gt;</html:code> elements.
      </html:p>
      </cabotool:description>

      <cabotool:example>
      <html:p>
      The style sheet document in the following example imports the styles 
      from another XSS document (blaf.xss) and defines an IE-specific and a 
      Netscape-specific style sheet:
      </html:p>

      <cabotool:sampleCode>
      &lt;?xml version="1.0"?&gt;
      &lt;styleSheetDocument version=&quot;2.0&quot;&gt;

         &lt;!-- Import all of the styles defines by blaf.xss --&gt;
         &lt;import name=&quot;blaf.xss&quot;/&gt;
      
         &lt;!-- Define some IE-specific styles --&gt;
         &lt;styleSheet browsers="ie"&gt;
            <i>&lt;-- IE-specific style definitions... --&gt;</i>
         &lt;/styleSheet&gt;
         
         &lt;!-- Now define some Netscape-specific styles --&gt;
         &lt;styleSheet browsers="netscape"&gt;
            <i>&lt;-- Netscape-specific style definitions... --&gt;</i>
         &lt;/styleSheet&gt;
      
      &lt;/styleSheetDocument&gt;
      </cabotool:sampleCode>

      </cabotool:example>

      </documentation>
    </annotation>
  </element>  

  <!-- Type definition for styleSheetDocument element -->
  <complexType name="styleSheetDocumentType">
    <sequence>
      <element name="import" type="style:importType" 
               minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>

          <cabotool:summary>
          The import element is used to include the contents of 
          one XSS document within another.
          </cabotool:summary>

          <cabotool:description>
          <html:p>
          The <html:code>&lt;import&gt;</html:code> element imports 
          the styles defined in the referenced XSS document into the 
          current document.  Styles defined in the importing document 
          take precedence over corresponding styles defined in the imported 
          document.
          </html:p>
          </cabotool:description>

          <cabotool:example>
            <html:p>
            When customizing the styles of a UIX-based application, it is 
            often necessary to create a new XSS document.  Often, the custom 
            XSS document uses the <html:code>&lt;import&gt;</html:code> 
            element to include all of the styles defined in some other 
            standard XSS document, such as blaf.xss.  The following sample 
            shows how to import an XSS document which exists in the same 
            directory as the custom document.
            </html:p>

              <cabotool:sampleCode>
              &lt;!--  This is in custom.xss: --&gt;
              &lt;styleSheetDocument&gt;

                &lt;import href="blaf.xss"/&gt;

                <i>&lt;!--  Style sheet definitions... --&gt;</i>

              &lt;/styleSheetDocument&gt;
              </cabotool:sampleCode>

            <html:p>
            The href attribute can specify the location of the document to 
            be imported using either file system paths or URIs.  The 
            following imports are all valid:
            </html:p>

             <cabotool:sampleCode>
             &lt;!-- A full file system path --&gt;
             &lt;import href="/private/Apache/htdocs/cabo/styles/blaf.xss"/&gt;

             &lt;!-- A relative file system path --&gt;
             &lt;import href="../../cabo/styles/blaf.xss"/&gt;

             &lt;!-- An URL --&gt;
             &lt;import href="http://www.example.org/cabo/styles/blaf.xss"/&gt;
             </cabotool:sampleCode>

          </cabotool:example>

          </documentation>
        </annotation>
      </element>

      <element name="styleSheet" type="style:styleSheetType"
               minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
          <cabotool:summary>
          The styleSheet element defines a set of styles which are 
          applied to a particular end user environment.
          </cabotool:summary>

          <cabotool:description>
          <html:p>
          The <html:code>&lt;styleSheet&gt;</html:code> element defines a 
          set of styles to be applied for a particular end user environment.
          Any number of <html:code>&lt;styleSheet&gt;</html:code> elements 
          can be defined within a single XSS document.  Each 
          <html:code>&lt;styleSheet&gt;</html:code> element specifies a set 
          of attributes which indicate the end user environment to which the 
          styles defined within the <html:code>&lt;styleSheet&gt;</html:code> 
          should be applied.  The styles defined by a 
          <html:code>&lt;styleSheet&gt;</html:code> element with no 
          attributes are applied to all end user environments.
          </html:p>
          </cabotool:description>

          <cabotool:example>
            <html:p>
            A style sheet document can contain more than one style sheet, 
            each of which defines a set of styles for a particular 
            end-user environment.  The attributes of the 
            <html:code>&lt;styleSheet&gt;</html:code> element are used to 
            limit the end user environments to which the included styles are 
            applied.  A <html:code>&lt;styleSheet&gt;</html:code> element 
            with  no attributes is the "base" or "default" style sheet.  
            The styles defined within this style sheet apply to all end 
            user environments.
            </html:p>

            <html:p>
            In the following example, a style is defined for table 
            column headers. The base style sheet defines the default 
            properties for <html:code>.OraTableColumnHeader</html:code>, which 
            are used in all environments. The second style sheet is 
            defined for Netscape, adding a new 
            <html:code>line-height</html:code> 
            property to <html:code>.OraTableColumnHeader</html:code>. This is 
            needed to make the table column headers render correctly 
            in Netscape Navigator.  Note that all the style properties
            defined in the base style sheet for 
            <html:code>.OraTableColumnHeader</html:code> remain in effect for 
            Netscape; the new style is <html:i>added</html:i>to those default 
            style properties.
            </html:p>

            <cabotool:sampleCode>
            &lt;styleSheetDocument&gt;
    
              &lt;!-- The base style sheet --&gt;
                &lt;styleSheet&gt;
                  &lt;style selector=".OraTableColumnHeader"&gt;
                    &lt;includeStyle name="AFDefaultBoldFont"/&gt;
                    &lt;includeStyle name="AFStartTextAlign"/&gt;
                    &lt;colorProperty name="background-color"&gt;DarkAccent&lt;/colorProperty&gt;
                    &lt;colorProperty name="color"&gt;Dark&lt;/colorProperty&gt;
                    &lt;property name="text-indent"&gt;1&lt;/property&gt;
                  &lt;/style&gt;

                  &lt;!-- other styles --&gt;

                &lt;/styleSheet&gt;
              
              &lt;!-- a derived style sheet for Netscape --&gt;
                &lt;styleSheet browsers="netscape"&gt;
                  &lt;style selector=".OraTableColumnHeader"&gt;
                    &lt;property name="line-height"&gt;1.2&lt;/property&gt;
                  &lt;/style&gt;

                  &lt;!-- other styles --&gt;

                &lt;/styleSheet&gt;
              
            &lt;/styleSheetDocument&gt;
            </cabotool:sampleCode>
  
  
            <html:p>
            In the next example, the base style sheet defines 
            text-alignment styles for languages that read left to 
            right. The derived style sheet defines text-alignment 
            styles for languages that read right to left. The derived 
            style sheet does not add styles, as in the example above. 
            Rather, it overrides the values of the 
            <html:code>text-align</html:code> properties of the existing 
            <html:code>AFStartTextAlign</html:code> and 
            <html:code>AFEndTextAlign</html:code> styles.
            </html:p>

            <cabotool:sampleCode>
            &lt;styleSheetDocument&gt;
    
              &lt;!-- The base style sheet --&gt;
              &lt;styleSheet&gt;
                &lt;style name="AFStartTextAlign"&gt;
                  &lt;property name="text-align"&gt;left&lt;/property&gt;
                &lt;/style&gt;
                &lt;style name="AFEndTextAlign"&gt;
                  &lt;property name="text-align"&gt;right&lt;/property&gt;
                &lt;/style&gt;

                &lt;-- other styles... --&gt;

            &lt;/styleSheet&gt;
    
            &lt;!-- a derived style sheet for languages that read right to left --&gt;
              &lt;styleSheet direction="rtl"&gt;
                &lt;style name="AFStartTextAlign"&gt;
                  &lt;property name="text-align"&gt;right&lt;/property&gt;
                &lt;/style>
                &lt;style name="AFEndTextAlign"&gt;
                  &lt;property name="text-align"&gt;left&lt;/property&gt;
                &lt;/style&gt;

                &lt;-- other styles... --&gt;

              &lt;/styleSheet&gt;
        
            &lt;/styleSheetDocument&gt;
            </cabotool:sampleCode>
  
            <html:p>
            Although the examples above are shown as two different 
            <html:code>styleSheetDocument</html:code> definitions, all these 
            style sheets could be defined in one style sheet document. 
            (And, in fact, they are taken from the same style sheet 
            document, in blaf.xss.) This makes it possible to generate 
            styles for a Netscape environment displaying a language that 
            reads right-to-left.
            </html:p>

            <html:p>
            The <html:code>locales</html:code>, 
            <html:code>browsers</html:code>, 
            <html:code>versions</html:code> and 
            <html:code>platforms</html:code> 
            attributes all support whitespace-separated lists 
            of values.  For example, the following style sheet
            applies to the Chinese, Japanese, and Korean languages.
            </html:p>
            
            <cabotool:sampleCode>
               &lt;styleSheet locales="zh ja ko"&gt;
            </cabotool:sampleCode>

            <html:p>            
            This style sheet applies to both IE and Mozilla browsers,
            but not to Netscape (4.x) browsers:
            </html:p>
            
            <cabotool:sampleCode>
               &lt;styleSheet browsers="ie mozilla"&gt;
            </cabotool:sampleCode>
            
            <html:p>
            Attributes can also be combined to create more specific
            restrictions on which end user environments are applicable.
            For example, the following style sheet applies to IE 5 and
            IE 6, but not to IE 4 or any other browser:
            </html:p>
            
            <cabotool:sampleCode>
               &lt;styleSheet browsers="ie" versions="5 6"&gt;
            </cabotool:sampleCode>
          </cabotool:example>
          </documentation>
        </annotation>
      </element>

    </sequence>

    <attribute name="version" type="decimal" default="2.0">
      <annotation>
        <documentation>
          The version of the XML Style Sheet language used by this
          document.
        </documentation>
      </annotation>
    </attribute>

    <attribute name="documentVersion" type="string">
      <annotation>
        <documentation>
          A string identifier which is used to uniquely identify a 
          particular version of this document.  The value of this 
          attribute may be included in the names of generated style
          sheet files and as such should be short and suitable for
          use in a file system.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

  <!-- Type definition for import element -->
  <complexType name="importType">
    <attribute name="href" type="anyURI" use="required">
      <annotation>
        <documentation>
        The location of the XSS document to import, specified as a 
        file system path or URI.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

  <!-- Type definition for styleSheet element -->
  <complexType name="styleSheetType">
    <sequence>
      <element ref="style:style" 
               minOccurs="0" maxOccurs="unbounded">
        <annotation>
          <documentation>
          The style element defines a set of style properties, which are
          associated with a particular selector or name.
          </documentation>
        </annotation>
      </element>
    </sequence>

    <attribute name="locales" type="style:localeListType">
      <annotation>
        <documentation>
        The set of locales to which this style sheet applies. Each item in the 
        whitespace-separated list is a language code or a language/country
        combination.  Languages are specified using the two letter lower case 
        language codes defined by ISO-639 (eg. "en").   A country code can be
        appended to a language code to limit the scope of the style sheet.  
        Countries are specified using the two letter uppercase ISO-3166 
        country codes (eg. "US").  When a country is specified, the underscore
        character is used as a separator (eg. "en_US").  If no 
        <html:code>locales</html:code> attribute is specified, the style 
        sheet applies to all locales.
        </documentation>
      </annotation>
    </attribute>

    <attribute name="direction">
      <annotation>
        <documentation>
        The reading direction to which this style sheet applies. 
        The value must either be <html:code>ltr</html:code> for left-to-right 
        languages or <html:code>rtl</html:code> for right-to-left languages. 
        If no <html:code>direction</html:code> attribute is specified, the 
        style sheet applies to all directions.
        </documentation>
      </annotation>
      <simpleType>
        <restriction base="string">
          <enumeration value="rtl"/>
          <enumeration value="ltr"/>
        </restriction>
      </simpleType>
    </attribute>

    <attribute name="browsers" type="style:browserListType">
      <annotation>
        <documentation>
        The set of browsers to which this style sheet applies. 
        Each item in the whitespace-separated list of browser names 
        must be one of the following values:
        
        <html:ul>
        <html:li><html:code>netscape</html:code> (Netscape Navigator)</html:li>
        <html:li><html:code>ie</html:code> (Internet Explorer)</html:li>
        <html:li><html:code>mozilla</html:code> (The Mozilla browser)</html:li>
        <html:li><html:code>gecko</html:code> (The gecko family of browsers)</html:li>
        <html:li><html:code>ice</html:code> (The ICE HTML library)</html:li>
        </html:ul>
        
        If no <html:code>browsers</html:code> attribute is specified, the 
        style sheet applies to all browsers.
        </documentation>
      </annotation>
    </attribute>

    <attribute name="versions" type="style:versionListType">
      <annotation>
        <documentation>
        The set of browser major version numbers to which this 
        style sheet applies.  Each item in the whitespace-separated
        list is an unsigned integer which indicates the major version 
        of the browser to which this style sheet applies.
        If no <html:code>versions</html:code> attribute is specified, 
        the style sheet applies to all browser versions.
        </documentation>
      </annotation>
    </attribute>

    <attribute name="platforms" type="style:platformListType">
      <annotation>
        <documentation>
        The set of client operating systems to which this 
        style sheet applies. Each item whitespace-separated
        list of platforms must be one of the following values:
        
        <html:ul>
        <html:li><html:code>windows</html:code> (Microsoft Windows: NT, 2000, 
                                                98, 95, etc.)</html:li>
        <html:li><html:code>macos</html:code> (Apple Macintosh)</html:li>
        <html:li><html:code>unix</html:code> (Solaris, Linux, etc...)</html:li>
        <html:li><html:code>solaris</html:code> (Solaris only)</html:li>
        <html:li><html:code>linux</html:code> (Linux only)</html:li>
        </html:ul>
        If no <html:code>platforms</html:code> attribute is specified, the 
        style sheet applies to all client platforms.
        </documentation>
      </annotation>
    </attribute>

  </complexType>


  <element name="style" type="style:styleType">
    <annotation>
      <documentation>
        <cabotool:summary>
          The style element defines a set of style properties, which are
          associated with a particular selector or name.
        </cabotool:summary>

        <cabotool:description>
        <html:p>
        Each <html:code>&lt;style&gt;</html:code> element defines 
        a group of style properties which are identified
        by either a selector or a name.  Styles which specify
        a selector are included in any CSS style sheets which
        are derived from the XSS document.  Styles which are
        identified by name do not appear in generated CSS style
        sheets.  Instead, named styles can be used to provide
        a logical representation of common style properties which
        may be shared by many selector-based styles.
        </html:p>
        </cabotool:description>

        <cabotool:example>
          <html:p>
          The following selector-based style defines the
          properties for the .AFInstructionText style:
          </html:p>            

          <cabotool:sampleCode>
            &lt;style selector=".AFInstructionText"&gt;
              &lt;property name="font-family"&gt;Arial,sans-serif&lt;/property&gt;
              &lt;property name="font-size"&gt;10pt&lt;/property&gt;    
              &lt;property name="color"&gt;#000000&lt;/property&gt;
            &lt;/style&gt;
          </cabotool:sampleCode>
            
          <html:p>
          Since this <html:code>&lt;style&gt;</html:code> element defines 
          a <html:code>selector</html:code> attribute, it appears in any
          CSS style sheets which are generated from the XSS
          document. The CSS style rule that is generated from 
          the .AFInstructionText style defined above is:
          </html:p>
            
          <cabotool:sampleCode>
            .AFInstructionText {
               font-family:Arial,sans-serif;
               font-size:10pt;
               color:#000000 
               }  
          </cabotool:sampleCode>

            
          <html:p>
          Named styles can be used to define common properties
          that are shared between multiple selector-based
          styles.  For example, the following named style 
          defines the font properties used by the 
          .AFInstructionText style and possibly other
          styles:
          </html:p>

          <cabotool:sampleCode>
            &lt;style name="AFDefaultFont"&gt;
              &lt;property name="font-family"&gt;Arial,sans-serif&lt;/property&gt;
              &lt;property name="font-size"&gt;10pt&lt;/property&gt;    
            &lt;/style&gt;
          </cabotool:sampleCode>
            
          <html:p>
          Although named styles do not appear in generated
          CSS style sheets, they can be referenced by 
          selector based styles using the 
          <html:code>&lt;includeStyle&gt;</html:code> or
          <html:code>&lt;includeProperty&gt;</html:code>
          elements.  For example, the .AFInstructionText
          style can now be rewritten as follows.
          </html:p>
            
          <cabotool:sampleCode>
            &lt;style selector=".AFInstructionText"&gt;
              &lt;includeStyle name="AFDefaultFont"&gt;
              &lt;property name="color"&gt;#000000&lt;/property&gt;
            &lt;/style&gt;
          </cabotool:sampleCode>
            
          <html:p>
          Any number of other styles can also refer to 
          the "AFDefaultFont" named style.  This approach
          allows style sheet designers to avoid unnecessary
          duplication of style properties.  It also 
          simplifies the customization process, as changes
          to a single named style are automatically 
          propagated to all styles which reference it.
          </html:p>
        </cabotool:example>

      </documentation>
    </annotation>
  </element>


  <!-- Type definition for style element -->
  <complexType name="styleType">
    <choice minOccurs="0" maxOccurs="unbounded">

      <element ref="style:property">
        <annotation>
          <documentation>
          The property element defines a single property of a style.
          </documentation>
        </annotation>
      </element>

      <element ref="style:compoundProperty">
        <annotation>
          <documentation>
          The compoundProperty defines a list-based property which can
          contain multiple values.
          </documentation>
        </annotation>
      </element>

      <element ref="style:includeStyle">
        <annotation>
          <documentation>
          The includeStyle element includes all of the properties of
          one style into another style.
          </documentation>
        </annotation>
      </element>

      <element ref="style:includeProperty">
        <annotation>
          <documentation>
          The includeProperty element includes one property from a
          style into another style.
          </documentation>
        </annotation>
      </element>

    </choice>

    <attribute name="name" type="string">
      <annotation>
        <documentation>
        The selector for this style. Any valid CSS 
        selector may be specified.  Styles which define
        a selector appear in generated CSS style sheets.
        </documentation>
      </annotation>
    </attribute>

    <attribute name="selector" type="string">
      <annotation>
        <documentation>
        The name of the style. Properties of named 
        styles can be included into other styles via the 
        <html:code>&lt;includeStyle&gt;</html:code> or 
        <html:code>&lt;includeProperty&gt;</html:code>
        elements.  Styles which define a name but not a 
        selector do not appear in generated CSS style
        sheets.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

  <element name="property" type="style:propertyType">
    <annotation>
      <documentation>

      <cabotool:summary>
      The property element defines a single property of a style.
      </cabotool:summary>

      <cabotool:description>
      <html:p>
      Each <html:code>&lt;property&gt;</html:code> element 
      defines a single visual property of a style
      as a name value pair.  The property name can
      be any valid CSS property name.  The property
      value can be any valid CSS property value for
      the specified name.
      </html:p>
      </cabotool:description>

      <cabotool:example>
        <html:p>
        Defining a property for an XSS style is 
        essentially the same as defining a CSS style. 
        The name of the property can be any valid CSS 
        name, and the value can be any value that can 
        associated with that name in CSS. The following 
        example shows two properties defined for a style.
        </html:p>            

        <cabotool:sampleCode>
          &lt;style selector=".ErrorText"&gt;
            &lt;property name="font-family"&gt;Arial, sans-serif&lt;/property&gt;
            &lt;property name="color">#cc0000&lt;/property&gt;
          &lt;/style&gt;
        </cabotool:sampleCode>
            
        <html:p>
        The CSS style definition generated from the 
        above XSS style definition would look like 
        this:
        </html:p>
            
        <cabotool:sampleCode>
           .ErrorText {
              font-family:Arial, sans serif;
              color:#cc0000}
        </cabotool:sampleCode>
      </cabotool:example>
      </documentation>
    </annotation>
  </element>

  <element name="compoundProperty">
    <annotation>
      <documentation>
      <cabotool:summary>
      The compoundProperty defines a list-based property which can
      contain multiple values.
      </cabotool:summary>

      <cabotool:description>
      <html:p>
      The <html:code>&lt;compoundProperty&gt;</html:code> element
      defines a property which consists of
      a multiple values.  Each value in the compound
      property is either specified explicitly via a 
      <code>&lt;value&gt;</code> child element, or 
      indirectly via an <code>&lt;includeValue&gt;</code> 
      element.  When the CSS for the compound property
      is generated, all values are placed into a single
      whitespace separated string.
      </html:p>
      </cabotool:description>

      <cabotool:example>
        <html:p>
        The following example shows a border property
        defined using the <html:code>&lt;property&gt;</html:code> 
        element:
        </html:p>            

        <cabotool:sampleCode>
            &lt;property name="border"&gt;2px dashed #336699&lt;/property&gt;
        </cabotool:sampleCode>

        <html:p>
        Since the border property value is itself a list of 
        values, it can also be defined using the
        <html:code>&lt;compoundProperty&gt;</html:code> element:
        </html:p>
            
        <cabotool:sampleCode>
            &lt;compoundProperty name="border"&gt;
              &lt;value&gt;2px&lt;/value&gt;
              &lt;value&gt;dashed&lt;/value&gt;
              &lt;value&gt;#336699&lt;/value&gt;
            &lt;/compoundProperty&gt;
        </cabotool:sampleCode>

            
        <html:p>
        The corresponding CSS that is generated for this 
        compound property is:
        </html:p>
            
        <cabotool:sampleCode>
          border:2px dashed #336699
        </cabotool:sampleCode>
            
        <html:p>
        Compound properties are more used when used in conjunction 
        with the <html:code>&lt;includeValue&gt;</html:code> element.
        For example, <html:code>&lt;includeValue&gt;</html:code>
        can be used in this example to pick up the border's
        color from some other shared style:
        </html:p>
            
        <cabotool:sampleCode>
           &lt;compoundProperty name="border"&gt;
             &lt;value&gt;2px&lt;/value&gt;
             &lt;value&gt;dashed&lt;/value&gt;
             &lt;includeValue name="AFDarkForeground" propertyName="color"/&gt;
           &lt;/compoundProperty&gt;
        </cabotool:sampleCode>
            
           
        <html:p>
        Using the <html:code>&lt;includeValue&gt;</html:code> element
        in this way can simplify customization.  In this case,
        changes to the <html:code>AFDarkForeground</html:code> style are
        automatically propagated to the color used by this
        border property.
        </html:p>
      </cabotool:example>
     </documentation>
    </annotation>

    <complexType name="compoundPropertyType">
     <choice minOccurs="0" maxOccurs="unbounded">
      <element name="value" type="string">
        <annotation>
          <documentation>
          <cabotool:summary>
          The value element defines a single value in a compound property.
          </cabotool:summary>

          <cabotool:description>
          <html:p>
          Each <html:code>&lt;value&gt;</html:code> element 
          contains a string which specifies one of the 
          values of the compound property.
          </html:p>
          </cabotool:description>

          <cabotool:example>
            <html:p>
            The following compound property uses
            <html:code>&lt;value&gt;</html:code> elements to 
            define each item in the property's 
            list of values:
            </html:p>            

            <cabotool:sampleCode>
                &lt;compoundProperty name="border"&gt;
                  &lt;value&gt;2px&lt;/value&gt;
                  &lt;value&gt;dashed&lt;/value&gt;
                  &lt;value&gt;#336699&lt;/value&gt;
                &lt;/compoundProperty&gt;
            </cabotool:sampleCode>
            
            <html:p>
            The corresponding CSS that is generated for this 
            compound property is:
            </html:p>
            
            <cabotool:sampleCode>
              border:2px dashed #336699
            </cabotool:sampleCode>

            <html:p>
            The <html:code>&lt;compoundProperty&gt;</html:code> element
            is more commonly used in conjunction with the
            <html:code>&lt;includeValue&gt;</html:code> element to generate
            lists of values which include values defined in
            other styles.
            </html:p>
          </cabotool:example>

          </documentation>
        </annotation>
      </element>

      <element ref="style:includeValue">
        <annotation>
          <documentation>
          The includeValue element includes a single value into a 
          compound property.
          </documentation>
        </annotation>
      </element>
     </choice>

    <attribute name="name" type="string" use="required">
      <annotation>
        <documentation>
        The name of the compound property that is being 
        defined. Although any CSS property name can be
        specified, the <html:code>&lt;compoundProperty&gt;</html:code>
        element is typically only used for properties which 
        consist of a list of multiple items, such as 
        <html:code>border</html:code> or <html:code>font</html:code>.
        </documentation>
      </annotation>
    </attribute>
  </complexType>
  </element>



  <element name="includeValue" type="style:includeValueType">
    <annotation>
      <documentation>
      <cabotool:summary>
      The includeValue element includes a single value into a 
      compound property.
      </cabotool:summary>

      <cabotool:description>
      <html:p>
      The <html:code>&lt;includeValue&gt;</html:code> element 
      is used to include a single property value 
      into a compound property.
      </html:p>
      </cabotool:description>

      <cabotool:example>
        <html:p>
        The most common use for the 
        <html:code>&lt;includeValue&gt;</html:code> element
        is to include a color value which is defined
        by some other style into a compound property.
        In the following example, the color of the 
        border is hardcoded to #336699:
        </html:p>            

        <cabotool:sampleCode>
            &lt;property name="border"&gt;2px dashed #336699&lt;/property&gt;
        </cabotool:sampleCode>
            

        <html:p>
        However, this color value can be defined in a named
        style which might be used by many other styles
        as follows:
        </html:p>
            
        <cabotool:sampleCode>
          &lt;style name="AFDarkForeground"&gt;
            &lt;property name="color"&gt;#336699&lt;/property&gt;
          &lt;/style&gt;
        </cabotool:sampleCode>
            
        <html:p>
        The compound border property can then be rewritten 
        as follows using the <html:code>&lt;includeValue&gt;</html:code> 
        element to take advantage of this shared color value:
        </html:p>
            
        <cabotool:sampleCode>
            &lt;compoundProperty name="border"&gt;
              &lt;value&gt;2px&lt;/value&gt;
              &lt;value&gt;dashed&lt;/value&gt;
              &lt;includeValue name="AFDarkForeground" propertyName="color"/&gt;
            &lt;/compoundProperty&gt;
        </cabotool:sampleCode>

        <html:p>
        Changes to the shared <html:code>AFDarkForeground</html:code>
        style are then automatically picked up by this
        border property.
        </html:p>
      </cabotool:example>

      </documentation>
    </annotation>
  </element>

  <element name="includeStyle" type="style:includeStyleType">
    <annotation>
      <documentation>

      <cabotool:summary>
      The includeStyle element includes all of the properties of
      one style into another style.
      </cabotool:summary>

      <cabotool:description>
      <html:p>
      The <html:code>&lt;includeStyle&gt;</html:code> element 
      is used to include the properties of one style 
      within another style.  The style to include can
      either be referenced either by its name or by 
      its selector.  As a result of including a style, 
      all of the properties from the included style 
      are defined within the including style.
      </html:p>
      </cabotool:description>

      <cabotool:example>
       <html:p>
        In the following example, the
        <html:code>.AFInstructionText</html:code> style uses 
        the <html:code>&lt;includeStyle&gt;</html:code>
        element to include the font-related
        properties defined by the 
        <html:code>AFDefaultFont</html:code> named style:
        </html:p>            

        <cabotool:sampleCode>
          &lt;style name="AFDefaultFont"&gt;
            &lt;property name="font-family"&gt;Arial,sans-serif&lt;/property&gt;
            &lt;property name="font-size"&gt;10pt&lt;/property&gt;    
          &lt;/style&gt;
            
          &lt;style selector=".AFInstructionText"&gt;
            &lt;includeStyle name="AFDefaultFont"&gt;
            &lt;property name="color"&gt;#000000&lt;/property&gt;
          &lt;/style&gt;
            
        </cabotool:sampleCode>

        <html:p>
        In this case, <html:code>.AFInstructionText</html:code>
        contains all of the properties defined by the
        <html:code>AFDefaultFont</html:code> style, as well as any
        properties defined locally via the 
        <html:code>&lt;property&gt;</html:code> element.
        </html:p>
            
        <html:p>
        Styles can also be included by selector.  For
        example, the following style uses 
        &lt;includeStyle&gt; to include all of the 
        styles defined by
        <html:code>.AFInstructionText</html:code>:
        </html:p>
            
        <cabotool:sampleCode>
          &lt;style selector=".OraInstructionTextBold"&gt;
            &lt;!-- First, include all of the properties defined
                    by .OraInstructionTextBold  --&gt;
            &lt;includeStyle selector=".AFInstructionText"&gt;
          
            &lt;!-- Now add our own style-specific properties --&gt;
            &lt;property name="font-weight"&gt;bold&lt;/property&gt;
          &lt;/style&gt;
            
        </cabotool:sampleCode>

        </cabotool:example>
      </documentation>
    </annotation>
  </element>

  <element name="includeProperty" type="style:includePropertyType">
    <annotation>
      <documentation>
      <cabotool:summary>
      The includeProperty element includes one property from a
      style into another style.
      </cabotool:summary>

      <cabotool:description>
      <html:p>
      The <html:code>&lt;includeProperty&gt;</html:code> element 
      is used to include a single property of one style 
      within another style.  Thus, the 
      <html:code>&lt;includeProperty&gt;</html:code> element
      is very similar to the 
      <html:code>&lt;includeStyle&gt;</html:code> element.
      The only difference is that 
      <html:code>&lt;includeStyle&gt;</html:code> includes
      all properties of the referenced style,
      whereas <html:code>&lt;includeProperty&gt;</html:code>
      includes only a single property.
      </html:p>
      </cabotool:description>

      <cabotool:example>
        <html:p>
        The most common use for the 
        <html:code>&lt;includeProperty&gt;</html:code> element
        is to allow a color value from one style
        to be reused under a different name in another
        style.  In the following example, the
        <html:code>AFDarkForeground</html:code> style reuses 
        the <html:code>AFDarkBackground</html:code> style's
        background color as the foreground color.
        </html:p>            

        <cabotool:sampleCode>
            
          &lt;!-- Define the AFDarkBackground color --&gt;
          &lt;style selector=".AFDarkBackground"&gt;
            &lt;property name="background-color"&gt;#336699&lt;/property&gt;
          &lt;/style&gt;
            
          &lt;!-- Now define the AFDarkForeground color, which picks up
               its color value from the AFDarkBackground style --&gt;
          &lt;style selector=".AFDarkForeground"&gt;
            &lt;includeProperty name=".AFDarkBackground"
                             propertyName="background-color"
                             localPropertyName="color"/&gt;
          &lt;/style&gt;
            
        </cabotool:sampleCode>
        
        <html:p>
        The corresponding CSS for these styles is:
        </html:p>            

        <cabotool:sampleCode>
          .AFDarkBackground { background-color:#336699 }
          .AFDarkForeground { color:#336699 }
        </cabotool:sampleCode>

            
        <html:p>
        The advantage of using the 
        <html:code>&lt;includeProperty&gt;</html:code> element
        in this case is that the color value (#336699)
        can be changed in one place, but is picked up
        by both the <html:code>.AFDarkForeground</html:code> and
        the <html:code>.AFDarkBackground</html:code> styles.
        </html:p>
      </cabotool:example>
      </documentation>
    </annotation>
  </element>


  <!-- Type definition for property elements -->
  <complexType name="propertyType">
    <simpleContent>
      <extension base="string">
        <attribute name="name" type="string" use="required">
          <annotation>
            <documentation>
            The name of the property that is being defined. 
            Any CSS property name (for example, 
            <html:code>font-size</html:code>, 
            <html:code>color</html:code>, etc.) 
            may be specified.
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </simpleContent>
  </complexType>

  <!-- Type definition for property elements -->
  <complexType name="compoundPropertyType">
    <choice minOccurs="0" maxOccurs="unbounded">
      <element name="value" type="string">
        <annotation>
          <documentation>
          <cabotool:summary>
          The value element defines a single value in a compound property.
          </cabotool:summary>

          <cabotool:description>
          <html:p>
          Each <html:code>&lt;value&gt;</html:code> element 
          contains a string which specifies one of the 
          values of the compound property.
          </html:p>
          </cabotool:description>

          <cabotool:example>
            <html:p>
            The following compound property uses
            <html:code>&lt;value&gt;</html:code> elements to 
            define each item in the property's 
            list of values:
            </html:p>            

            <cabotool:sampleCode>
                &lt;compoundProperty name="border"&gt;
                  &lt;value&gt;2px&lt;/value&gt;
                  &lt;value&gt;dashed&lt;/value&gt;
                  &lt;value&gt;#336699&lt;/value&gt;
                &lt;/compoundProperty&gt;
            </cabotool:sampleCode>
            
            <html:p>
            The corresponding CSS that is generated for this 
            compound property is:
            </html:p>
            
            <cabotool:sampleCode>
              border:2px dashed #336699
            </cabotool:sampleCode>

            <html:p>
            The <html:code>&lt;compoundProperty&gt;</html:code> element
            is more commonly used in conjunction with the
            <html:code>&lt;includeValue&gt;</html:code> element to generate
            lists of values which include values defined in
            other styles.
            </html:p>
          </cabotool:example>

          </documentation>
        </annotation>
      </element>

      <element ref="style:includeValue">
        <annotation>
          <documentation>
          The includeValue element includes a single value into a 
          compound property.
          </documentation>
        </annotation>
      </element>
    </choice>

    <attribute name="name" type="string" use="required">
      <annotation>
        <documentation>
        The name of the compound property that is being 
        defined. Although any CSS property name can be
        specified, the <html:code>&lt;compoundProperty&gt;</html:code>
        element is typically only used for properties which 
        consist of a list of multiple items, such as 
        <html:code>border</html:code> or <html:code>font</html:code>.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

  <!-- Type definition for includeStyle element -->
  <complexType name="includeStyleType">
    <attribute name="name" type="string">
      <annotation>
        <documentation>
        The name of the style to include.
        </documentation>
      </annotation>
    </attribute>

    <attribute name="selector" type="string">
      <annotation>
        <documentation>
        The selector of the style to include.
        </documentation>
      </annotation>
    </attribute>
  </complexType>

  <!-- Type definition for includeValue element -->
  <complexType name="includeValueType">
    <complexContent>
      <extension base="style:includeStyleType">
        <attribute name="propertyName" type="string" use="required">
          <annotation>
            <documentation>
              The name of the property to include.
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>

  <!-- Type definition for includeProperty element -->
  <complexType name="includePropertyType">
    <complexContent>
      <extension base="style:includeValueType">
        <attribute name="localPropertyName" type="string">
          <annotation>
            <documentation>
            The name of the property as it should appear
            within the including style.
            The <html:code>localPropertyName</html:code> attribute 
            allows the name of the property to be modified
            locally while maintaining the remote value.
            For example, a style can use the background color
            of another style as its own foreground color
            by including the "background-color" property
            and setting the <html:code>localPropertyName</html:code>
            attribute to "color".
            </documentation>
          </annotation>
        </attribute>
      </extension>
    </complexContent>
  </complexType>

  <!-- Type definition for valid browser names -->
  <simpleType name="browserType">
    <restriction base="string">
      <enumeration value="ie"/>
      <enumeration value="netscape"/>
      <enumeration value="mozilla"/>
      <enumeration value="gecko"/>
      <enumeration value="ice"/>
    </restriction>
  </simpleType>

  <!-- Type definition for list of browser names -->
  <simpleType name="browserListType">
    <list itemType="style:browserType"/>
  </simpleType>

  <!-- Type definition for list of browser major versions.  At the
       moment, we only allow unsigned integers -->
  <simpleType name="versionListType">
    <list itemType="unsignedInt"/>
  </simpleType>

  <!-- Type definition for valid platform names -->
  <simpleType name="platformType">
    <restriction base="string">
      <enumeration value="windows"/>
      <enumeration value="macos"/>
      <enumeration value="unix"/>
      <enumeration value="solaris"/>
      <enumeration value="linux"/>
    </restriction>
  </simpleType>

  <!-- Type definition for list of platform names -->
  <simpleType name="platformListType">
    <list itemType="style:platformType"/>
  </simpleType>

  <!-- Type defintion for locales -->
  <simpleType name="localeType">
    <restriction base="string">
      <pattern value="[a-z]{2}(_[A-Z]{2})?"/>
    </restriction>
  </simpleType>

  <!-- Type definition for list of locales -->
  <simpleType name="localeListType">
    <list itemType="style:localeType"/>
  </simpleType>

</schema>

